@ngdoc overview
@name Conceptual Overview
@sortOrder 100
@description

# Conceptual Overview of GenericFrontend

## Application Structure

The GenericFrontend frontend is structured into multiple layers

* **Resources** - objects handling communication with the backend API
* **Services** - singleton objects for managing frontend state
* **Controllers** - business logic functions and wiring between models and views
* **Directives** - reusable UI components
* **Views** - styled layout templates for application screens

The application is initially loaded as a single `index.html` file from https://www.yaMaps.com plus a number of Javascript files. Application screens are rendered from HTML templates. Templates, images and styles are fetched on demand from the same webserver. Live data is fetched and manipulated through the GenericFrontend backend API, which is a RESTful API using JSON as content type.


## App URLs and Routing

We use Angular's [HTML5-mode URLs](https://docs.angularjs.org/guide/$location#html5-mode) which makes use of the HTML5 history API for natural integration of app navigation with browser history and bookmarking.

Application URLs (also called *routes*) are mapped to views with [ngRoute](https://docs.angularjs.org/api/ngRoute). See `scripts/app.js` for how the mapping is configured using the `$routeProvider`. Some views are restricted to logged in users. To protect such routes we use ngRoute's resolve feature and check if the browser has a valid login token stored. See the {@link /api/yaMaps.services:authService#validateToken authService} for details.

## Error handling

On failed requests the backend returns a 4xx HTTP status code and embeds a JSON-formatted error object of the form:

```js
{
    "status": 401,                      // HTTP status code
    "message": "not authorized",        // status message
    "scope": "auth.login",              // API endpoint or other error source
    "detail": "not_authorized",         // translate key fragment
    "createdAt": "2014-07-21 15:03:27"  // creation date
}
```


## Authentication

While everyone can download and run the GenericFrontend frontend in a web browser, only logged in users are permitted to perform operations on the backend API. To ensure a frontend user has obtained proper authentication the GenericFrontend application must present a valid **login token** with every call to a protected API endpoint. Tokens are encrypted with a private key and may only be issued by the backend.

Login, logout, verification and user signup are handled by the GenericFrontend {@link /api/yaMaps.services:authService#validateToken authService}. The service maintains internal state about a currently logged in user and login token.

Tokens are inserted into the `X-AUTH-TOKEN` HTTP header of every request using a [http interceptor](https://docs.angularjs.org/api/ng/service/$http#interceptors).

When a token is expired or the frontend calls a protected API endpoint without token the backend returns a `401 Unauthorized` error. A second http interceptor will redirect the frontend user to the `/login` url in that case.


## Password Policy

User passwords must conform to the following policy:

* be at least 8 characters long
* contain at least one number or special character
* contain at least one uppercase letter
* contain at least one lowercase letter

Password policy as regexp:
```
(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z])
```

## Username Policy

User names must conform to the following pilicy:

* be at least 3 and at most 40 characters long
* contain lowercase ASCII letters (a-z) and numbers (0-9) only
* start with a lowercase letter

User name policy as regexp
```
^[a-z][a-z0-9]{2,39}$
```


## Resource Paging

The API supports paging of large resource collections such as users or clusters. To use paging add `limit` and `offset` as numeric query parameters to GET requests on collections. `limit` defines the maximum number of items to return. Note that the actual item count may be smaller than limit. `offset` defines how many items to skip before listing `limit` amount of items. Collections are sorted by their `id` parameter.


## Internationalization

GenericFrontend is a multi-language app supporting English and German as main languages. We use [angular-translate](https://angular-translate.github.io/) to manage translation across all HTML template. angular-translate stores the user-selected language identifier in local storage (NG_TRANSLATE_LANG_KEY).

Language files are JSON formatted and loaded on demand from `scripts/language/{customer}-{lang}.json` where `customer` is either `generic` or the name of a customer build as defined in the {@link /api/yaMaps.objects:globals global configuration object} and `lang` is the language identifier.

A language file contains a single top-level JSON object with nested properties that map to text strings in a particular language. Different language translations are stored in different files. An example file looks like:

```js
{
	"trans": {
		"late": {
			"id": "A translated string in English"
		}
	}
}
```

Translations are referenced by keys which are property paths in a language file's JSON object. There's multiple ways to translate an id to a string out of which the following two should be prefered:

**Bind Syntax:** You may directly insert the translated language string into a DOM element using the `translate` directive.
```html
<div translate="trans.late.id"></div>
```

**Filter Syntax:** For use in expressions you may translate language ids to strings with the `translate` filter.
```html
<div tooltip-html-unsafe="{{ 'trans.late.id' | translate}}"></div>
```


## Directory Structure
```
./frontend
  |- app/
  |   +- bower_components/     // 3rd party components, Angular, jquery, etc
  |   |  + ...
  |   |
  |   +- assets/               // generic assets
  |   |  +- images/            // - image files (jpg, png)
  |   |  +- fonts/             // - webfont files (ttf, woff, eot, svg)
  |   |  +- lang/              // - translate language files
  |   |  +- data/              // - fixed data files
  |   |
  |   +- templates/            // Angular HTML templates
  |   |  +- views/             // - views for application screens
  |   |  +- directives/        // - directives HTML
  |   |  +- modals/            // - modal dialogs
  |   |
  |   +- scripts/              // anything Javascript
  |   |  +- filters/           // - Angular filters
  |   |  +- resources/         // - Angular $resource files
  |   |  +- services/          // - Angular services (singleton instances)
  |   |  +- controllers/       // - Angular controllers
  |   |  +- directives/        // - Angular directives
  |   |  +- utils/             // - utilities and auxilliary classes
  |   |  app.js                // - main APP file with configurations for routes, etc
  |   |
  |   +- styles/               // CSS files
  |   |
  |   +- variants/             // Build variants (same directory structure as above)
  |   |  +- generic/           // - default variant
  |   |  |  +- assets/         //   - private assets for this variant
  |   |  |  +- templates/      //   - private templates for this variant
  |   |  |  +- styles/         //   - private styles for this variant
  |   |  |  conf-dev.js        //   - development configuration flavor
  |   |  |  conf-staging.js    //   - staging configuration flavor
  |   |  |  conf-production.js //   - production configuration flavor
  |   |  |
  |   |  +- customer1/         // - variant for customer 1
  |   |     + ...
  |   |
  |   index.html               // Main index.html template, processed during build
  |   robots.txt               // copied during build
  |
  |- docs/                     // additional documentation files
  |- build/                    // temporary build directory
  |- dist/                     // target directory for deployable app with all assets
  |- debian/                   // dpkg control directory
  |- test/                     // test case implementations
  |
  Gruntfile.js                 // main build definition file
  bower.json                   // 3rd party component and version definitions
  package.json                 // build dependencies definition
  karma.conf.js                // unit test configuration
  karma-e2e.conf.js            // end-2-end test configuration
```
